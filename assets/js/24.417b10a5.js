(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{384:function(t,e,a){"use strict";a.r(e);var s=a(42),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"becoming-a-validator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#becoming-a-validator"}},[t._v("#")]),t._v(" Becoming a Validator")]),t._v(" "),a("div",{staticClass:"custom-block danger"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("If you intend to become a "),a("code",[t._v("MainNet")]),t._v(" Validator, it is "),a("strong",[t._v("HIGHLY")]),t._v(" recommended that you practice on "),a("code",[t._v("TestNet")]),t._v(" first in order to "),a("em",[t._v("fully familiarise")]),t._v(" yourself with the process.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("IMPORTANT")]),t._v(" "),a("p",[t._v("Whenever you use "),a("code",[t._v("undcli")]),t._v(" to send Txs or query the chain ensure you pass the correct data to the "),a("code",[t._v("--chain-id")]),t._v(" and if necessary "),a("code",[t._v("--node=")]),t._v(" flags so that you connect to the correct network!")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Validator nodes require high availability and uptimes. The following guide therefore assumes the node is running on a server/cloud VM, as opposed to a laptop or home PC.")])]),t._v(" "),a("div",{staticClass:"custom-block danger"},[a("p",{staticClass:"custom-block-title"},[t._v("IMPORTANT")]),t._v(" "),a("p",[t._v("There is a known issue with the "),a("code",[t._v("syncable")]),t._v(" pruning option in the Cosmos SDK. Since "),a("code",[t._v('pruning = "syncable"')]),t._v(" is the default value when "),a("code",[t._v("und init")]),t._v(" is run, it is recommended to set the value to either "),a("code",[t._v('pruning = "everything"')]),t._v(" or "),a("code",[t._v('pruning = "nothing"')]),t._v(" in "),a("code",[t._v("$HOME/.und_mainchain/config/app.toml")]),t._v(". Note that setting to "),a("code",[t._v('pruning = "nothing"')]),t._v(" will increase storage usage considerably.")])]),t._v(" "),a("h4",{attrs:{id:"contents"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#contents"}},[t._v("#")]),t._v(" Contents")]),t._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#prerequisites"}},[t._v("Prerequisites")])]),a("li",[a("a",{attrs:{href:"#creating-a-validator"}},[t._v("Creating a validator")]),a("ul",[a("li",[a("a",{attrs:{href:"#verify"}},[t._v("Verify")])])])])])]),a("p"),t._v(" "),a("h2",{attrs:{id:"prerequisites"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prerequisites"}},[t._v("#")]),t._v(" Prerequisites")]),t._v(" "),a("p",[t._v("Before continuing, ensure you have gone through the following docs:")]),t._v(" "),a("ol",[a("li",[a("RouterLink",{attrs:{to:"/software/installation.html"}},[t._v("Installing the software")])],1),t._v(" "),a("li",[a("RouterLink",{attrs:{to:"/networks/join-network.html"}},[t._v("Join a Public Network")])],1),t._v(" "),a("li",[a("RouterLink",{attrs:{to:"/software/accounts-wallets.html"}},[t._v("Accounts and Wallets")])],1),t._v(" "),a("li",[t._v("Chain ID - if you haven't already, you can get the current chain ID by running:")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("jq --raw-output '.chain_id' $HOME/.und_mainchain/config/genesis.json\n")])])]),a("p",[t._v("The above command assumes you have downloaded the appropriate genesis for the network you wish to become a Validator on to the default "),a("code",[t._v("$HOME/.und_mainchain")]),t._v(" directory.")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("IMPORTANT")]),t._v(" "),a("p",[t._v("you will need an account with sufficient FUND to self-delegate to your validator node.")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("if you intend to fully participate in the running of a network, your node will need to be permanently available and online. In which case, you will need to investigate running "),a("code",[t._v("und")]),t._v(" as a "),a("RouterLink",{attrs:{to:"/networks/run-und-as-service.html"}},[t._v("background service")])],1)]),t._v(" "),a("h2",{attrs:{id:"creating-a-validator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-validator"}},[t._v("#")]),t._v(" Creating a validator")]),t._v(" "),a("div",{staticClass:"custom-block danger"},[a("p",{staticClass:"custom-block-title"},[t._v("IMPORTANT!")]),t._v(" "),a("p",[t._v("keep your "),a("code",[t._v("$HOME/.und_mainchain/config/node_key.json")]),t._v(" and "),a("code",[t._v("$HOME/.und_mainchain/config/priv_validator_key.json")]),t._v(" files "),a("strong",[t._v("safe and secure")]),t._v("! These are required for your node to propose and sign blocks. If you ever migrate your node to a different host machine or need to restore your node, you will need these!")])]),t._v(" "),a("p",[t._v("The first thing you will need is your node's Tendermint validator public key. This will be used to register your node as a Validator on the network. To get the key, open a terminal and run:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("und tendermint show-validator\n")])])]),a("p",[t._v("This will output your node's public key. Make a note of it, as it will be required soon.")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("IMPORTANT")]),t._v(" "),a("p",[t._v("Before continuing, ensure your full node has fully synced with the network and downloaded all the blocks (this may take a while, so go and make a brew). You can check the current network block height in the "),a("a",{attrs:{href:"https://explorer-testnet.unification.io",target:"_blank",rel:"noopener noreferrer"}},[t._v("TestNet block explorer"),a("OutboundLink")],1),t._v(", or "),a("a",{attrs:{href:"https://explorer.unification.io",target:"_blank",rel:"noopener noreferrer"}},[t._v("MainNet block explorer"),a("OutboundLink")],1),t._v(" depending on the network you are joining. For each block your full node syncs, you will see:")]),t._v(" "),a("p",[a("code",[t._v("I[2020-01-15|11:45:07.782] Executed block module=state height=12345 validTxs=24 invalidTxs=0")])]),t._v(" "),a("p",[t._v("When the height is the same as the current network block number, your full node has completed syncing.")])]),t._v(" "),a("p",[t._v("To create your Validator, you will need to generate, sign and broadcast a special transaction to the network which will register your Tendermint validator public key and stake the amount of FUND (in "),a("code",[t._v("nund")]),t._v(") specified (via self-delegation). Run the following command, modifying as required:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("undcli tx staking create-validator "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  --amount"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("STAKE_IN_NUND "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  --pubkey"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("NODE_TENDERMINT_PUBLIC_KEY "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  --moniker"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"YOUR_VALIDATOR_MONIKER"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  --website"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"YOUR_WEBSITE_URL"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  --identity"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("16_DIGIT_KEYBASE_IO_ID "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  --details"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"NODE_DESCRIPTION"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  --security-contact"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"SECURITY_CONTACT_EMAIL"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  --chain-id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("CHAIN_ID "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  --commission-rate"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.10"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  --commission-max-rate"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.20"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  --commission-max-change-rate"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.01"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  --min-self-delegation"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  --gas"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"auto"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  --gas-prices"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.25nund"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  --gas-adjustment"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  --from"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("SELF_DELEGATOR_ACCOUNT\n")])])]),a("p",[a("strong",[t._v("Mandatory fields")])]),t._v(" "),a("p",[a("code",[t._v("STAKE_IN_NUND")]),t._v(": the amount in nund you want to delegate to yourself. For example, if you want to stake 1000 FUND, enter 1000000000000nund.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("You can use the built in "),a("code",[t._v("undcli")]),t._v(" conversion tool to calculate this:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("undcli convert 1000 fund nund.\n")])])])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("IMPORTANT")]),t._v(" "),a("p",[t._v("do not attempt to stake more than you have in your account. "),a("strong",[t._v("Ensure you have enough FUND to pay for the transaction fees, and enough left over for future transactions such as withdrawing rewards!")])])]),t._v(" "),a("p",[a("code",[t._v("NODE_TENDERMINT_PUBLIC_KEY")]),t._v(": Your node's tendermint public key, obtained earlier via the "),a("code",[t._v("und tendermint show-validator")]),t._v(" command.")]),t._v(" "),a("p",[a("code",[t._v("CHAIN_ID")]),t._v(": the chain you are creating a validator for. This was obtained previously via the "),a("code",[t._v("jq")]),t._v(" command, and will be for example "),a("code",[t._v("FUND-Mainchain-TestNet-v8")]),t._v(" or "),a("code",[t._v("FUND-Mainchain-MainNet-v1")]),t._v(" etc.")]),t._v(" "),a("p",[a("code",[t._v("SELF_DELEGATOR_ACCOUNT")]),t._v(": the name of the account being used to stake self-delegated FUND and sign the transaction — for example, the identifier you entered when running the "),a("code",[t._v("undcli keys add")]),t._v(" command to create/import an account.")]),t._v(" "),a("p",[a("code",[t._v("YOUR_VALIDATOR_MONIKER")]),t._v(": a moniker which will publicly identify your Validator node on the network.")]),t._v(" "),a("p",[a("strong",[t._v("Optional fields")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Ensure you create your validator with as much of the following additional information as you can. It will be publicly visible, and help potential stakers connect with you")])]),t._v(" "),a("p",[a("code",[t._v("YOUR_WEBSITE_URL")]),t._v(": the URL for the site promoting your validation node")]),t._v(" "),a("p",[a("code",[t._v("16_DIGIT_KEYBASE_IO_ID")]),t._v(": Your 16 digit public "),a("a",{attrs:{href:"https://keybase.io",target:"_blank",rel:"noopener noreferrer"}},[t._v("keybase.io"),a("OutboundLink")],1),t._v(" PGP public key ID if you have one and want to associate your ID to your validator node.")]),t._v(" "),a("p",[a("code",[t._v("NODE_DESCRIPTION")]),t._v(": a brief description of your validator node")]),t._v(" "),a("p",[a("code",[t._v("SECURITY_CONTACT_EMAIL")]),t._v(": Email address for the security contact for your validator node")]),t._v(" "),a("p",[a("strong",[t._v("Commission Rates")])]),t._v(" "),a("p",[t._v("Your commission rates can be set using the "),a("code",[t._v("--commission-rate")]),t._v(" , "),a("code",[t._v("--commission-max-change-rate")]),t._v(" and "),a("code",[t._v("--commission-max-rate")]),t._v(" flags.")]),t._v(" "),a("p",[a("code",[t._v("--commission-rate")]),t._v(": The % commission you will earn from delegators’ rewards. Keeping this relatively low can attract more delegators to your node.")]),t._v(" "),a("p",[a("code",[t._v("--commission-max-rate")]),t._v(": The maximum you will ever increase your commission rate to — you cannot raise commission above this value. Again, keeping this low can attract more delegators.")]),t._v(" "),a("p",[a("code",[t._v("--commission-max-change-rate")]),t._v(": The maximum you can increase the commission-rate by per day. For example, if your maximum change rate is 0.01, you can only make changes in 0.01 increments, so from 0.10 (10%) to 0.11 (11%).")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("IMPORTANT")]),t._v(" "),a("p",[t._v("The values for "),a("code",[t._v("--commission-max-change-rate")]),t._v(" and "),a("code",[t._v("--commission-max-rate")]),t._v(" flags "),a("strong",[t._v("cannot be changed")]),t._v(" after the "),a("code",[t._v("create-validator")]),t._v(" command has been run.")])]),t._v(" "),a("p",[t._v("Finally, the "),a("code",[t._v("--min-self-delegation")]),t._v(" flag is the minimum amount of "),a("code",[t._v("nund")]),t._v(" you are required to keep self-delegated to your validator, meaning you must always have "),a("em",[t._v("at least")]),t._v(" this amount self-delegated to your node.")]),t._v(" "),a("p",[a("strong",[t._v("Example: creating a TestNet validator")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("undcli tx staking create-validator "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n--amount"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("1000000000000nund "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n--pubkey"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("undvalconspub1zcjduepq6yq7drzefkavsrxhxk69cy63tj3r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n--moniker"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MyAwesomeNode"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n--website"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://my-node-site.com"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n--details"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"My node is awesome"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n--security-contact"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"security@my-node-site.com"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n--chain-id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("FUND-Mainchain-TestNet-v8 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n--commission-rate"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.07"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n--commission-max-rate"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.20"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n--commission-max-change-rate"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.01"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n--min-self-delegation"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1000000000"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n--gas"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"auto"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n--gas-prices"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.25nund"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n--gas-adjustment"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n--from"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("my_new_wallet\n")])])]),a("p",[t._v("The command will return a Tx hash, which you can use to query whether or not the transaction was successful:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("undcli query tx TX_HASH --chain-id FUND-Mainchain-TestNet-v8\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("you can set the "),a("code",[t._v("--broadcast-mode")]),t._v(" flag in the command to "),a("code",[t._v("block")]),t._v(". This will tell "),a("code",[t._v("undcli")]),t._v(" to wait for the transaction to be processed in a block before returning the result. This will take up to 5-6 seconds to complete, but the Tx result will be included in the output.")])]),t._v(" "),a("h3",{attrs:{id:"verify"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#verify"}},[t._v("#")]),t._v(" Verify")]),t._v(" "),a("p",[t._v("You can verify your node is registered as a validator by running:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("undcli query staking validator "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),t._v("undcli keys show SELF_DELEGATOR_ACCOUNT --bech"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("val -a"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n--chain-id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("CHAIN_ID\n")])])]),a("p",[t._v("replacing "),a("code",[t._v("SELF_DELEGATOR_ACCOUNT")]),t._v(" and "),a("code",[t._v("CHAIN_ID")]),t._v(" accordingly.")])])}),[],!1,null,null,null);e.default=n.exports}}]);