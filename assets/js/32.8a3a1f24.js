(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{391:function(e,a,n){"use strict";n.r(a);var t=n(42),s=Object(t.a)({},(function(){var e=this,a=e.$createElement,n=e._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"running-und-as-a-background-service"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#running-und-as-a-background-service"}},[e._v("#")]),e._v(" Running "),n("code",[e._v("und")]),e._v(" as a background service")]),e._v(" "),n("h4",{attrs:{id:"contents"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#contents"}},[e._v("#")]),e._v(" Contents")]),e._v(" "),n("p"),n("div",{staticClass:"table-of-contents"},[n("ul")]),n("p"),e._v(" "),n("p",[e._v("If you intend to run your node as a Validator on any of the public networks, then you will most likely need to permanently run "),n("code",[e._v("und")]),e._v(" as a background service (as opposed to manually running "),n("code",[e._v("und start")]),e._v(" and leaving a terminal window/SSH session open).")]),e._v(" "),n("p",[e._v("This can easily be done using "),n("code",[e._v("systemctl")]),e._v(", and setting up an appropriate service configuration.")]),e._v(" "),n("p",[e._v("The following is a generic *nix guide, and may need adapting for your particular distribution.")]),e._v(" "),n("p",[e._v("Any text editor can be used to create the service configuration file, for example "),n("code",[e._v("nano")]),e._v(":")]),e._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("nano")]),e._v(" /etc/systemd/system/und.service\n")])])]),n("p",[e._v("At a minimum, the service configuration should contain:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("[Unit]\nDescription=Unification Mainchain Validator Node\n\n[Service]\nUser=USERNAME\nGroup=USERNAME\nWorkingDirectory=/home/USERNAME\nExecStart=/home/USERNAME/go/bin/und start --home /home/USERNAME/.und_mainchain\nLimitNOFILE=4096\n\n[Install]\nWantedBy=default.target\n")])])]),n("p",[e._v("Of course, "),n("code",[e._v("und")]),e._v(" can also be installed into "),n("code",[e._v("/usr/local/bin")]),e._v(" instead of "),n("code",[e._v("/home/USERNAME/$GOPATH/bin/und")])]),e._v(" "),n("p",[e._v("It is entirely possible to create a more sophisticated service definition should you desire.")]),e._v(" "),n("p",[e._v("Next, inform "),n("code",[e._v("systemctl")]),e._v(" of the new service:")]),e._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" systemctl daemon-reload\n")])])]),n("p",[e._v("The service can now be started:")]),e._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" systemctl start und\n")])])]),n("p",[e._v("and stopped:")]),e._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" systemctl stop und\n")])])]),n("p",[e._v("in the background.")]),e._v(" "),n("p",[e._v("Finally, you can monitor the log output for the service by running:")]),e._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[e._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" journalctl -u und --follow\n")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);