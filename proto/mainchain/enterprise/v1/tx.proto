syntax = "proto3";
package mainchain.enterprise.v1;

import "mainchain/enterprise/v1/enterprise.proto";
import "cosmos_sdk/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/unification-com/mainchain/x/enterprise/types";

service Msg {
  // UndPurchaseOrder defines a method to create new purchase order.
  rpc UndPurchaseOrder(MsgUndPurchaseOrder)
      returns (MsgUndPurchaseOrderResponse);

  rpc ProcessUndPurchaseOrder(MsgProcessUndPurchaseOrder)
      returns (MsgProcessUndPurchaseOrderResponse);

  rpc WhitelistAddress(MsgWhitelistAddress)
      returns (MsgWhitelistAddressResponse);

}

message MsgUndPurchaseOrder {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string purchaser = 1;
  cosmos.base.v1beta1.Coin amount = 2 [ (gogoproto.nullable) = false ];
}

// MsgSubmitProposalResponse defines the Msg/SubmitProposal response type.
message MsgUndPurchaseOrderResponse { uint64 purchase_order_id = 1; }


message MsgProcessUndPurchaseOrder {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  uint64 purchase_order_id = 1 [ (gogoproto.jsontag) = "id", (gogoproto.moretags) = "yaml:\"id\"" ];
  PurchaseOrderStatus decision = 2;
  string signer = 3;
}

message MsgProcessUndPurchaseOrderResponse {}

message MsgWhitelistAddress {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string address = 1;
  string signer = 2;
  WhitelistAction whitelist_action = 3 [ (gogoproto.customname) = "Action",  (gogoproto.jsontag) = "action", (gogoproto.moretags) = "yaml:\"action\"" ];
}

message MsgWhitelistAddressResponse{}
