// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mainchain/enterprise/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryEnterpriseUndPurchaseOrderRequest is the request type for the Query/PO RPC method.
type QueryEnterpriseUndPurchaseOrderRequest struct {
	// purchase_order_id defines the PO to query for.
	PurchaseOrderId uint64 `protobuf:"varint,1,opt,name=purchase_order_id,json=purchaseOrderId,proto3" json:"purchase_order_id,omitempty"`
}

func (m *QueryEnterpriseUndPurchaseOrderRequest) Reset() {
	*m = QueryEnterpriseUndPurchaseOrderRequest{}
}
func (m *QueryEnterpriseUndPurchaseOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEnterpriseUndPurchaseOrderRequest) ProtoMessage()    {}
func (*QueryEnterpriseUndPurchaseOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{2}
}
func (m *QueryEnterpriseUndPurchaseOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEnterpriseUndPurchaseOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEnterpriseUndPurchaseOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEnterpriseUndPurchaseOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEnterpriseUndPurchaseOrderRequest.Merge(m, src)
}
func (m *QueryEnterpriseUndPurchaseOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEnterpriseUndPurchaseOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEnterpriseUndPurchaseOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEnterpriseUndPurchaseOrderRequest proto.InternalMessageInfo

func (m *QueryEnterpriseUndPurchaseOrderRequest) GetPurchaseOrderId() uint64 {
	if m != nil {
		return m.PurchaseOrderId
	}
	return 0
}

// QueryEnterpriseUndPurchaseOrderResponse is the response type for the Query/PO RPC method.
type QueryEnterpriseUndPurchaseOrderResponse struct {
	PurchaseOrder EnterpriseUndPurchaseOrder `protobuf:"bytes,1,opt,name=purchase_order,json=purchaseOrder,proto3" json:"purchase_order"`
}

func (m *QueryEnterpriseUndPurchaseOrderResponse) Reset() {
	*m = QueryEnterpriseUndPurchaseOrderResponse{}
}
func (m *QueryEnterpriseUndPurchaseOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEnterpriseUndPurchaseOrderResponse) ProtoMessage()    {}
func (*QueryEnterpriseUndPurchaseOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{3}
}
func (m *QueryEnterpriseUndPurchaseOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEnterpriseUndPurchaseOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEnterpriseUndPurchaseOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEnterpriseUndPurchaseOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEnterpriseUndPurchaseOrderResponse.Merge(m, src)
}
func (m *QueryEnterpriseUndPurchaseOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEnterpriseUndPurchaseOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEnterpriseUndPurchaseOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEnterpriseUndPurchaseOrderResponse proto.InternalMessageInfo

func (m *QueryEnterpriseUndPurchaseOrderResponse) GetPurchaseOrder() EnterpriseUndPurchaseOrder {
	if m != nil {
		return m.PurchaseOrder
	}
	return EnterpriseUndPurchaseOrder{}
}

// QueryEnterpriseUndPurchaseOrdersRequest is the request type for the Query/PurchaseOrders RPC
// method
type QueryEnterpriseUndPurchaseOrdersRequest struct {
	Pagination *query.PageRequest  `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Purchaser  string              `protobuf:"bytes,2,opt,name=purchaser,proto3" json:"purchaser,omitempty"`
	Status     PurchaseOrderStatus `protobuf:"varint,3,opt,name=status,proto3,enum=mainchain.enterprise.v1.PurchaseOrderStatus" json:"status,omitempty"`
}

func (m *QueryEnterpriseUndPurchaseOrdersRequest) Reset() {
	*m = QueryEnterpriseUndPurchaseOrdersRequest{}
}
func (m *QueryEnterpriseUndPurchaseOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEnterpriseUndPurchaseOrdersRequest) ProtoMessage()    {}
func (*QueryEnterpriseUndPurchaseOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{4}
}
func (m *QueryEnterpriseUndPurchaseOrdersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEnterpriseUndPurchaseOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEnterpriseUndPurchaseOrdersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEnterpriseUndPurchaseOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEnterpriseUndPurchaseOrdersRequest.Merge(m, src)
}
func (m *QueryEnterpriseUndPurchaseOrdersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEnterpriseUndPurchaseOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEnterpriseUndPurchaseOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEnterpriseUndPurchaseOrdersRequest proto.InternalMessageInfo

func (m *QueryEnterpriseUndPurchaseOrdersRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryEnterpriseUndPurchaseOrdersRequest) GetPurchaser() string {
	if m != nil {
		return m.Purchaser
	}
	return ""
}

func (m *QueryEnterpriseUndPurchaseOrdersRequest) GetStatus() PurchaseOrderStatus {
	if m != nil {
		return m.Status
	}
	return StatusNil
}

// QueryEnterpriseUndPurchaseOrdersResponse is the response type for the Query/PurchaseOrders RPC
// method
type QueryEnterpriseUndPurchaseOrdersResponse struct {
	// info is the signing info of all validators
	PurchaseOrders []EnterpriseUndPurchaseOrder `protobuf:"bytes,1,rep,name=purchase_orders,json=purchaseOrders,proto3" json:"purchase_orders"`
	Pagination     *query.PageResponse          `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryEnterpriseUndPurchaseOrdersResponse) Reset() {
	*m = QueryEnterpriseUndPurchaseOrdersResponse{}
}
func (m *QueryEnterpriseUndPurchaseOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEnterpriseUndPurchaseOrdersResponse) ProtoMessage()    {}
func (*QueryEnterpriseUndPurchaseOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{5}
}
func (m *QueryEnterpriseUndPurchaseOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEnterpriseUndPurchaseOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEnterpriseUndPurchaseOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEnterpriseUndPurchaseOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEnterpriseUndPurchaseOrdersResponse.Merge(m, src)
}
func (m *QueryEnterpriseUndPurchaseOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEnterpriseUndPurchaseOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEnterpriseUndPurchaseOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEnterpriseUndPurchaseOrdersResponse proto.InternalMessageInfo

func (m *QueryEnterpriseUndPurchaseOrdersResponse) GetPurchaseOrders() []EnterpriseUndPurchaseOrder {
	if m != nil {
		return m.PurchaseOrders
	}
	return nil
}

func (m *QueryEnterpriseUndPurchaseOrdersResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryLockedUndByAddressRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *QueryLockedUndByAddressRequest) Reset()         { *m = QueryLockedUndByAddressRequest{} }
func (m *QueryLockedUndByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLockedUndByAddressRequest) ProtoMessage()    {}
func (*QueryLockedUndByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{6}
}
func (m *QueryLockedUndByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockedUndByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockedUndByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockedUndByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockedUndByAddressRequest.Merge(m, src)
}
func (m *QueryLockedUndByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockedUndByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockedUndByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockedUndByAddressRequest proto.InternalMessageInfo

func (m *QueryLockedUndByAddressRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type QueryLockedUndByAddressResponse struct {
	Owner     string     `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	LockedUnd *LockedUnd `protobuf:"bytes,2,opt,name=locked_und,json=lockedUnd,proto3" json:"locked_und,omitempty"`
}

func (m *QueryLockedUndByAddressResponse) Reset()         { *m = QueryLockedUndByAddressResponse{} }
func (m *QueryLockedUndByAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLockedUndByAddressResponse) ProtoMessage()    {}
func (*QueryLockedUndByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{7}
}
func (m *QueryLockedUndByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockedUndByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockedUndByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockedUndByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockedUndByAddressResponse.Merge(m, src)
}
func (m *QueryLockedUndByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockedUndByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockedUndByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockedUndByAddressResponse proto.InternalMessageInfo

func (m *QueryLockedUndByAddressResponse) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryLockedUndByAddressResponse) GetLockedUnd() *LockedUnd {
	if m != nil {
		return m.LockedUnd
	}
	return nil
}

type QueryTotalLockedRequest struct {
}

func (m *QueryTotalLockedRequest) Reset()         { *m = QueryTotalLockedRequest{} }
func (m *QueryTotalLockedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalLockedRequest) ProtoMessage()    {}
func (*QueryTotalLockedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{8}
}
func (m *QueryTotalLockedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalLockedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalLockedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalLockedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalLockedRequest.Merge(m, src)
}
func (m *QueryTotalLockedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalLockedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalLockedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalLockedRequest proto.InternalMessageInfo

type QueryTotalLockedResponse struct {
	Amount types.Coin `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount"`
}

func (m *QueryTotalLockedResponse) Reset()         { *m = QueryTotalLockedResponse{} }
func (m *QueryTotalLockedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalLockedResponse) ProtoMessage()    {}
func (*QueryTotalLockedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{9}
}
func (m *QueryTotalLockedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalLockedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalLockedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalLockedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalLockedResponse.Merge(m, src)
}
func (m *QueryTotalLockedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalLockedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalLockedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalLockedResponse proto.InternalMessageInfo

func (m *QueryTotalLockedResponse) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

type QueryTotalUnlockedRequest struct {
}

func (m *QueryTotalUnlockedRequest) Reset()         { *m = QueryTotalUnlockedRequest{} }
func (m *QueryTotalUnlockedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalUnlockedRequest) ProtoMessage()    {}
func (*QueryTotalUnlockedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{10}
}
func (m *QueryTotalUnlockedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalUnlockedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalUnlockedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalUnlockedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalUnlockedRequest.Merge(m, src)
}
func (m *QueryTotalUnlockedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalUnlockedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalUnlockedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalUnlockedRequest proto.InternalMessageInfo

type QueryTotalUnlockedResponse struct {
	Amount types.Coin `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount"`
}

func (m *QueryTotalUnlockedResponse) Reset()         { *m = QueryTotalUnlockedResponse{} }
func (m *QueryTotalUnlockedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalUnlockedResponse) ProtoMessage()    {}
func (*QueryTotalUnlockedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{11}
}
func (m *QueryTotalUnlockedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalUnlockedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalUnlockedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalUnlockedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalUnlockedResponse.Merge(m, src)
}
func (m *QueryTotalUnlockedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalUnlockedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalUnlockedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalUnlockedResponse proto.InternalMessageInfo

func (m *QueryTotalUnlockedResponse) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

type QueryTotalSupplyRequest struct {
}

func (m *QueryTotalSupplyRequest) Reset()         { *m = QueryTotalSupplyRequest{} }
func (m *QueryTotalSupplyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalSupplyRequest) ProtoMessage()    {}
func (*QueryTotalSupplyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{12}
}
func (m *QueryTotalSupplyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalSupplyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalSupplyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalSupplyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalSupplyRequest.Merge(m, src)
}
func (m *QueryTotalSupplyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalSupplyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalSupplyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalSupplyRequest proto.InternalMessageInfo

type QueryTotalSupplyResponse struct {
	Supply UndSupply `protobuf:"bytes,1,opt,name=supply,proto3" json:"supply"`
}

func (m *QueryTotalSupplyResponse) Reset()         { *m = QueryTotalSupplyResponse{} }
func (m *QueryTotalSupplyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalSupplyResponse) ProtoMessage()    {}
func (*QueryTotalSupplyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{13}
}
func (m *QueryTotalSupplyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalSupplyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalSupplyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalSupplyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalSupplyResponse.Merge(m, src)
}
func (m *QueryTotalSupplyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalSupplyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalSupplyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalSupplyResponse proto.InternalMessageInfo

func (m *QueryTotalSupplyResponse) GetSupply() UndSupply {
	if m != nil {
		return m.Supply
	}
	return UndSupply{}
}

// QuerySupplyOfOverrideRequest is the request type for the Query/SupplyOf RPC method.
type QuerySupplyOfOverrideOfRequest struct {
	// denom is the coin denom to query balances for.
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QuerySupplyOfOverrideOfRequest) Reset()         { *m = QuerySupplyOfOverrideOfRequest{} }
func (m *QuerySupplyOfOverrideOfRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySupplyOfOverrideOfRequest) ProtoMessage()    {}
func (*QuerySupplyOfOverrideOfRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{14}
}
func (m *QuerySupplyOfOverrideOfRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySupplyOfOverrideOfRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySupplyOfOverrideOfRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySupplyOfOverrideOfRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySupplyOfOverrideOfRequest.Merge(m, src)
}
func (m *QuerySupplyOfOverrideOfRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySupplyOfOverrideOfRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySupplyOfOverrideOfRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySupplyOfOverrideOfRequest proto.InternalMessageInfo

func (m *QuerySupplyOfOverrideOfRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryWhitelistRequest struct {
}

func (m *QueryWhitelistRequest) Reset()         { *m = QueryWhitelistRequest{} }
func (m *QueryWhitelistRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWhitelistRequest) ProtoMessage()    {}
func (*QueryWhitelistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{15}
}
func (m *QueryWhitelistRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWhitelistRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWhitelistRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWhitelistRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWhitelistRequest.Merge(m, src)
}
func (m *QueryWhitelistRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWhitelistRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWhitelistRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWhitelistRequest proto.InternalMessageInfo

type QueryWhitelistResponse struct {
	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *QueryWhitelistResponse) Reset()         { *m = QueryWhitelistResponse{} }
func (m *QueryWhitelistResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWhitelistResponse) ProtoMessage()    {}
func (*QueryWhitelistResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{16}
}
func (m *QueryWhitelistResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWhitelistResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWhitelistResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWhitelistResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWhitelistResponse.Merge(m, src)
}
func (m *QueryWhitelistResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWhitelistResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWhitelistResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWhitelistResponse proto.InternalMessageInfo

func (m *QueryWhitelistResponse) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type QueryWhitelistedRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryWhitelistedRequest) Reset()         { *m = QueryWhitelistedRequest{} }
func (m *QueryWhitelistedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWhitelistedRequest) ProtoMessage()    {}
func (*QueryWhitelistedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{17}
}
func (m *QueryWhitelistedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWhitelistedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWhitelistedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWhitelistedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWhitelistedRequest.Merge(m, src)
}
func (m *QueryWhitelistedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWhitelistedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWhitelistedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWhitelistedRequest proto.InternalMessageInfo

func (m *QueryWhitelistedRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryWhitelistedResponse struct {
	Address     string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Whitelisted bool   `protobuf:"varint,2,opt,name=whitelisted,proto3" json:"whitelisted,omitempty"`
}

func (m *QueryWhitelistedResponse) Reset()         { *m = QueryWhitelistedResponse{} }
func (m *QueryWhitelistedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWhitelistedResponse) ProtoMessage()    {}
func (*QueryWhitelistedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{18}
}
func (m *QueryWhitelistedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWhitelistedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWhitelistedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWhitelistedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWhitelistedResponse.Merge(m, src)
}
func (m *QueryWhitelistedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWhitelistedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWhitelistedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWhitelistedResponse proto.InternalMessageInfo

func (m *QueryWhitelistedResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryWhitelistedResponse) GetWhitelisted() bool {
	if m != nil {
		return m.Whitelisted
	}
	return false
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "mainchain.enterprise.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "mainchain.enterprise.v1.QueryParamsResponse")
	proto.RegisterType((*QueryEnterpriseUndPurchaseOrderRequest)(nil), "mainchain.enterprise.v1.QueryEnterpriseUndPurchaseOrderRequest")
	proto.RegisterType((*QueryEnterpriseUndPurchaseOrderResponse)(nil), "mainchain.enterprise.v1.QueryEnterpriseUndPurchaseOrderResponse")
	proto.RegisterType((*QueryEnterpriseUndPurchaseOrdersRequest)(nil), "mainchain.enterprise.v1.QueryEnterpriseUndPurchaseOrdersRequest")
	proto.RegisterType((*QueryEnterpriseUndPurchaseOrdersResponse)(nil), "mainchain.enterprise.v1.QueryEnterpriseUndPurchaseOrdersResponse")
	proto.RegisterType((*QueryLockedUndByAddressRequest)(nil), "mainchain.enterprise.v1.QueryLockedUndByAddressRequest")
	proto.RegisterType((*QueryLockedUndByAddressResponse)(nil), "mainchain.enterprise.v1.QueryLockedUndByAddressResponse")
	proto.RegisterType((*QueryTotalLockedRequest)(nil), "mainchain.enterprise.v1.QueryTotalLockedRequest")
	proto.RegisterType((*QueryTotalLockedResponse)(nil), "mainchain.enterprise.v1.QueryTotalLockedResponse")
	proto.RegisterType((*QueryTotalUnlockedRequest)(nil), "mainchain.enterprise.v1.QueryTotalUnlockedRequest")
	proto.RegisterType((*QueryTotalUnlockedResponse)(nil), "mainchain.enterprise.v1.QueryTotalUnlockedResponse")
	proto.RegisterType((*QueryTotalSupplyRequest)(nil), "mainchain.enterprise.v1.QueryTotalSupplyRequest")
	proto.RegisterType((*QueryTotalSupplyResponse)(nil), "mainchain.enterprise.v1.QueryTotalSupplyResponse")
	proto.RegisterType((*QuerySupplyOfOverrideOfRequest)(nil), "mainchain.enterprise.v1.QuerySupplyOfOverrideOfRequest")
	proto.RegisterType((*QueryWhitelistRequest)(nil), "mainchain.enterprise.v1.QueryWhitelistRequest")
	proto.RegisterType((*QueryWhitelistResponse)(nil), "mainchain.enterprise.v1.QueryWhitelistResponse")
	proto.RegisterType((*QueryWhitelistedRequest)(nil), "mainchain.enterprise.v1.QueryWhitelistedRequest")
	proto.RegisterType((*QueryWhitelistedResponse)(nil), "mainchain.enterprise.v1.QueryWhitelistedResponse")
}

func init() {
	proto.RegisterFile("mainchain/enterprise/v1/query.proto", fileDescriptor_4dd8eb5b331b8d2b)
}

var fileDescriptor_4dd8eb5b331b8d2b = []byte{
	// 1082 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0xa6, 0xad, 0xc1, 0x2f, 0x6a, 0x0a, 0xd3, 0x40, 0x9c, 0x4d, 0x70, 0xd2, 0x4d, 0x69,
	0xdc, 0x36, 0xec, 0xd4, 0x0e, 0x6a, 0x7a, 0x41, 0x34, 0xe1, 0x9f, 0x90, 0x90, 0x92, 0x6e, 0x62,
	0x90, 0x10, 0x52, 0x58, 0x7b, 0x27, 0xce, 0x2a, 0xf6, 0xcc, 0x76, 0x67, 0x37, 0x25, 0x44, 0xb9,
	0x70, 0x85, 0x03, 0x12, 0x17, 0x24, 0x0e, 0x1c, 0xb8, 0x20, 0xf1, 0x05, 0xf8, 0x08, 0x39, 0x46,
	0x42, 0x08, 0xb8, 0x20, 0x94, 0xf0, 0x01, 0xf8, 0x08, 0xc8, 0x33, 0xb3, 0xeb, 0x5d, 0x3b, 0x6b,
	0x3b, 0x89, 0xd4, 0x9b, 0x77, 0xe6, 0xfd, 0xde, 0xef, 0xf7, 0x7e, 0x33, 0xfb, 0xde, 0x1a, 0xe6,
	0x5b, 0xb6, 0x4b, 0xeb, 0x3b, 0xb6, 0x4b, 0x31, 0xa1, 0x01, 0xf1, 0x3d, 0xdf, 0xe5, 0x04, 0xef,
	0x95, 0xf1, 0xd3, 0x90, 0xf8, 0xfb, 0xa6, 0xe7, 0xb3, 0x80, 0xa1, 0xc9, 0x38, 0xc8, 0xec, 0x04,
	0x99, 0x7b, 0x65, 0x7d, 0xa2, 0xc1, 0x1a, 0x4c, 0xc4, 0xe0, 0xf6, 0x2f, 0x19, 0xae, 0xcf, 0x34,
	0x18, 0x6b, 0x34, 0x09, 0xb6, 0x3d, 0x17, 0xdb, 0x94, 0xb2, 0xc0, 0x0e, 0x5c, 0x46, 0xb9, 0xda,
	0x35, 0xeb, 0x8c, 0xb7, 0x18, 0xdf, 0xe2, 0xce, 0x2e, 0xae, 0xd9, 0x9c, 0x48, 0x26, 0xbc, 0x57,
	0xae, 0x91, 0xc0, 0x2e, 0x63, 0xcf, 0x6e, 0xb8, 0x54, 0x00, 0x54, 0x7c, 0x29, 0x4b, 0x61, 0x42,
	0x8a, 0x8c, 0x34, 0xba, 0x33, 0x47, 0x39, 0xeb, 0xcc, 0x55, 0xd9, 0x8c, 0x09, 0x40, 0x4f, 0xda,
	0x7c, 0xeb, 0xb6, 0x6f, 0xb7, 0xb8, 0x45, 0x9e, 0x86, 0x84, 0x07, 0xc6, 0x26, 0xdc, 0x4c, 0xad,
	0x72, 0x8f, 0x51, 0x4e, 0xd0, 0x5b, 0x90, 0xf3, 0xc4, 0x4a, 0x41, 0x9b, 0xd3, 0x4a, 0x63, 0x95,
	0x59, 0x33, 0xc3, 0x08, 0x53, 0x02, 0x57, 0xaf, 0x1e, 0xfd, 0x3d, 0x3b, 0x62, 0x29, 0x90, 0xb1,
	0x09, 0x77, 0x44, 0xd6, 0xf7, 0xe2, 0xd0, 0x2a, 0x75, 0xd6, 0x43, 0xbf, 0xbe, 0x63, 0x73, 0xb2,
	0xe6, 0x3b, 0xc4, 0x57, 0xfc, 0xe8, 0x1e, 0xbc, 0xec, 0xa9, 0xf5, 0x2d, 0xd6, 0xde, 0xd8, 0x72,
	0x1d, 0xc1, 0x79, 0xd5, 0xba, 0xe1, 0x25, 0x01, 0x1f, 0x3a, 0xc6, 0xd7, 0x1a, 0x2c, 0x0c, 0x4c,
	0xab, 0x0a, 0xf8, 0x1c, 0xc6, 0xd3, 0x79, 0x55, 0x21, 0x4b, 0x99, 0x85, 0x64, 0x27, 0x55, 0xc5,
	0x5d, 0x4f, 0xe9, 0x31, 0x7e, 0x1f, 0xac, 0x26, 0x72, 0x19, 0xbd, 0x0f, 0xd0, 0x39, 0x5d, 0xa5,
	0xe4, 0x8e, 0xba, 0x0e, 0x66, 0xfb, 0xc0, 0x4c, 0x79, 0xe9, 0xd4, 0xb1, 0x99, 0xeb, 0x76, 0x83,
	0x28, 0xac, 0x95, 0x40, 0xa2, 0x19, 0xc8, 0x47, 0x22, 0xfc, 0xc2, 0xe8, 0x9c, 0x56, 0xca, 0x5b,
	0x9d, 0x05, 0xf4, 0x2e, 0xe4, 0x78, 0x60, 0x07, 0x21, 0x2f, 0x5c, 0x99, 0xd3, 0x4a, 0xe3, 0x95,
	0xc5, 0xec, 0x43, 0x4b, 0xaa, 0xdc, 0x10, 0x18, 0x4b, 0x61, 0x8d, 0x3f, 0x34, 0x28, 0x0d, 0xae,
	0x4b, 0xd9, 0x5c, 0x83, 0x1b, 0x69, 0x9b, 0xdb, 0x17, 0xe6, 0xca, 0xe5, 0x7c, 0x1e, 0x4f, 0xf9,
	0xcc, 0xd1, 0x07, 0x29, 0xf3, 0x46, 0x85, 0x79, 0x0b, 0x03, 0xcd, 0x93, 0x02, 0x93, 0xee, 0x19,
	0x0f, 0xa1, 0x28, 0x0a, 0xfb, 0x88, 0xd5, 0x77, 0x89, 0x53, 0xa5, 0xce, 0xea, 0xfe, 0x8a, 0xe3,
	0xf8, 0x84, 0xc7, 0xe7, 0x34, 0x01, 0xd7, 0xd8, 0x33, 0xaa, 0x2e, 0x4b, 0xde, 0x92, 0x0f, 0xc6,
	0x97, 0x30, 0x9b, 0x89, 0x53, 0x3e, 0x9c, 0x09, 0x44, 0x2b, 0x00, 0x4d, 0x81, 0xd9, 0x0a, 0xa9,
	0xa3, 0x94, 0x1b, 0x99, 0xc6, 0xc4, 0xe9, 0xad, 0x7c, 0x33, 0xfa, 0x69, 0x4c, 0xc1, 0xa4, 0xe0,
	0xde, 0x64, 0x81, 0xdd, 0x94, 0x11, 0xd1, 0xab, 0xbb, 0x01, 0x85, 0xde, 0x2d, 0xa5, 0x67, 0x19,
	0x72, 0x76, 0x8b, 0x85, 0x34, 0x50, 0x97, 0x6d, 0x2a, 0xe5, 0x57, 0xe4, 0xd4, 0x3b, 0xcc, 0xa5,
	0xd1, 0x9b, 0x2b, 0xc3, 0x8d, 0x69, 0x98, 0xea, 0x24, 0xad, 0xd2, 0x66, 0x8a, 0xb1, 0x0a, 0xfa,
	0x59, 0x9b, 0x97, 0xe5, 0x4c, 0xd5, 0xb8, 0x11, 0x7a, 0x5e, 0x73, 0x3f, 0x62, 0xfc, 0x2c, 0x59,
	0x63, 0xb4, 0xa5, 0xf8, 0x1e, 0x43, 0x8e, 0x8b, 0x15, 0xc5, 0x97, 0xed, 0x6c, 0x95, 0x3a, 0x12,
	0x1b, 0x11, 0x4b, 0x5c, 0x7c, 0x21, 0xe4, 0xe6, 0xda, 0xf6, 0xda, 0x1e, 0xf1, 0x7d, 0xd7, 0x21,
	0x6b, 0xdb, 0x89, 0x0b, 0xe1, 0x10, 0xca, 0x5a, 0xd1, 0xb9, 0x8a, 0x07, 0x63, 0x12, 0x5e, 0x11,
	0xb8, 0x4f, 0x76, 0xdc, 0x80, 0x34, 0x5d, 0x1e, 0x44, 0x72, 0x1f, 0xc2, 0xab, 0xdd, 0x1b, 0x4a,
	0xec, 0x0c, 0xe4, 0x6d, 0x79, 0x67, 0x88, 0x7c, 0x45, 0xf2, 0x56, 0x67, 0xc1, 0x58, 0x52, 0x0e,
	0xc4, 0xb8, 0xd8, 0x73, 0x54, 0x80, 0x17, 0x54, 0x9c, 0xd2, 0x10, 0x3d, 0x1a, 0x1f, 0x2b, 0x6f,
	0x52, 0x20, 0x45, 0x97, 0x89, 0x42, 0x73, 0x30, 0xf6, 0xac, 0x03, 0x10, 0x97, 0xf2, 0x45, 0x2b,
	0xb9, 0x54, 0xf9, 0x6f, 0x1c, 0xae, 0x89, 0xc4, 0xe8, 0x1b, 0x0d, 0x72, 0xb2, 0xbf, 0xa3, 0xfb,
	0x99, 0xe6, 0xf6, 0x0e, 0x15, 0x7d, 0x71, 0xb8, 0x60, 0xa9, 0xd5, 0x58, 0xf8, 0xea, 0xb7, 0x7f,
	0xbf, 0x1b, 0xbd, 0x85, 0x66, 0x71, 0xd6, 0xbc, 0x93, 0x53, 0x05, 0xfd, 0xa5, 0x81, 0x9e, 0xdd,
	0x3d, 0xd0, 0xdb, 0xfd, 0x59, 0x07, 0xce, 0x22, 0xfd, 0xf1, 0xc5, 0x13, 0xa8, 0x52, 0x1e, 0x89,
	0x52, 0x2a, 0xe8, 0x41, 0x76, 0x29, 0x8c, 0xe3, 0x83, 0x9e, 0x89, 0x77, 0x88, 0x8e, 0x34, 0x98,
	0xee, 0xd3, 0x70, 0xd1, 0x85, 0xb5, 0xc5, 0x87, 0xb2, 0x72, 0x89, 0x0c, 0xaa, 0xbc, 0xdb, 0xa2,
	0xbc, 0x22, 0x9a, 0xe9, 0x57, 0x1e, 0xfa, 0x55, 0x03, 0xd4, 0xdb, 0x2a, 0xd1, 0x72, 0x7f, 0xfe,
	0xcc, 0xa6, 0xac, 0x3f, 0x3a, 0x3f, 0x50, 0xe9, 0xc5, 0x42, 0xef, 0x5d, 0xb4, 0x90, 0xa9, 0x57,
	0xb6, 0x30, 0x7c, 0x20, 0xfa, 0xf5, 0x21, 0xfa, 0x41, 0x83, 0xb1, 0x44, 0x3b, 0x45, 0x0f, 0xfa,
	0x53, 0xf7, 0x36, 0x65, 0xbd, 0x7c, 0x0e, 0xc4, 0xd0, 0xf7, 0x5f, 0xaa, 0x44, 0x3f, 0x69, 0x70,
	0x3d, 0xd5, 0x7a, 0x51, 0x65, 0x08, 0xb6, 0xae, 0x26, 0xae, 0x2f, 0x9d, 0x0b, 0xa3, 0x34, 0xde,
	0x15, 0x1a, 0xe7, 0xd1, 0xad, 0x4c, 0x8d, 0x61, 0xa4, 0x29, 0xf6, 0x50, 0x76, 0xd5, 0xa1, 0x3c,
	0x4c, 0x35, 0xfd, 0xa1, 0x3c, 0x4c, 0xcf, 0x82, 0x21, 0x3c, 0x94, 0x2d, 0x1f, 0xfd, 0xa8, 0xc1,
	0xcd, 0x44, 0x82, 0xa8, 0xe3, 0x3f, 0x1f, 0x95, 0xf3, 0x42, 0xe5, 0x6b, 0x68, 0x1a, 0xcb, 0xc9,
	0x88, 0x6b, 0x36, 0xdd, 0x8d, 0xbf, 0xd5, 0x95, 0xc2, 0x5f, 0x34, 0x78, 0xa9, 0x7b, 0x20, 0x0d,
	0x7a, 0x79, 0x32, 0x07, 0xd8, 0x45, 0x54, 0xde, 0x17, 0x2a, 0x5f, 0x47, 0xf3, 0x7d, 0x54, 0xe2,
	0x03, 0x31, 0x09, 0x0f, 0xd1, 0xf7, 0x1a, 0xe4, 0xe3, 0x01, 0x84, 0xcc, 0xfe, 0x6c, 0xdd, 0xf3,
	0x52, 0xc7, 0x43, 0xc7, 0x2b, 0x6d, 0xf7, 0x84, 0xb6, 0xdb, 0xc8, 0xc8, 0x3c, 0xe7, 0x78, 0x92,
	0xa1, 0x9f, 0x35, 0x18, 0x4b, 0xcc, 0xc6, 0x41, 0x47, 0xdc, 0x3b, 0x7b, 0x07, 0x99, 0x77, 0xc6,
	0xe0, 0x35, 0xde, 0x14, 0x02, 0x4d, 0xb4, 0x38, 0x58, 0x20, 0x3e, 0x50, 0x33, 0xf9, 0x70, 0xf5,
	0xc9, 0xd1, 0x49, 0x51, 0x3b, 0x3e, 0x29, 0x6a, 0xff, 0x9c, 0x14, 0xb5, 0x6f, 0x4f, 0x8b, 0x23,
	0xc7, 0xa7, 0xc5, 0x91, 0x3f, 0x4f, 0x8b, 0x23, 0x9f, 0x2e, 0x37, 0xdc, 0x60, 0x27, 0xac, 0x99,
	0x75, 0xd6, 0xc2, 0x21, 0x75, 0xb7, 0xdd, 0xba, 0xf8, 0x96, 0x7d, 0xa3, 0xfd, 0xdc, 0x61, 0xf8,
	0x22, 0xc9, 0x11, 0xec, 0x7b, 0x84, 0xd7, 0x72, 0xe2, 0x5f, 0xdf, 0xd2, 0xff, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x7a, 0x17, 0x34, 0xcc, 0xe7, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Purchase Order queries proposal details based on PurchaseOrderId.
	EnterpriseUndPurchaseOrder(ctx context.Context, in *QueryEnterpriseUndPurchaseOrderRequest, opts ...grpc.CallOption) (*QueryEnterpriseUndPurchaseOrderResponse, error)
	// Purchase Order queries proposal details based on PurchaseOrderId.
	EnterpriseUndPurchaseOrders(ctx context.Context, in *QueryEnterpriseUndPurchaseOrdersRequest, opts ...grpc.CallOption) (*QueryEnterpriseUndPurchaseOrdersResponse, error)
	// Queries an account address for their locked FUND
	LockedUndByAddress(ctx context.Context, in *QueryLockedUndByAddressRequest, opts ...grpc.CallOption) (*QueryLockedUndByAddressResponse, error)
	// Get total locked FUND
	TotalLocked(ctx context.Context, in *QueryTotalLockedRequest, opts ...grpc.CallOption) (*QueryTotalLockedResponse, error)
	// Get total Unlocked FUND
	TotalUnlocked(ctx context.Context, in *QueryTotalUnlockedRequest, opts ...grpc.CallOption) (*QueryTotalUnlockedResponse, error)
	// Get total supply, including Ent. locked FUND (overrides bank's total supply query)
	TotalSupply(ctx context.Context, in *QueryTotalSupplyRequest, opts ...grpc.CallOption) (*QueryTotalSupplyResponse, error)
	TotalSupplyOverride(ctx context.Context, in *QueryTotalSupplyRequest, opts ...grpc.CallOption) (*QueryTotalSupplyResponse, error)
	// SupplyOf queries the supply of a single coin.
	SupplyOfOverride(ctx context.Context, in *QuerySupplyOfOverrideOfRequest, opts ...grpc.CallOption) (*QueryTotalSupplyResponse, error)
	// Query whitelisted addresses
	Whitelist(ctx context.Context, in *QueryWhitelistRequest, opts ...grpc.CallOption) (*QueryWhitelistResponse, error)
	Whitelisted(ctx context.Context, in *QueryWhitelistedRequest, opts ...grpc.CallOption) (*QueryWhitelistedResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/mainchain.enterprise.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EnterpriseUndPurchaseOrder(ctx context.Context, in *QueryEnterpriseUndPurchaseOrderRequest, opts ...grpc.CallOption) (*QueryEnterpriseUndPurchaseOrderResponse, error) {
	out := new(QueryEnterpriseUndPurchaseOrderResponse)
	err := c.cc.Invoke(ctx, "/mainchain.enterprise.v1.Query/EnterpriseUndPurchaseOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EnterpriseUndPurchaseOrders(ctx context.Context, in *QueryEnterpriseUndPurchaseOrdersRequest, opts ...grpc.CallOption) (*QueryEnterpriseUndPurchaseOrdersResponse, error) {
	out := new(QueryEnterpriseUndPurchaseOrdersResponse)
	err := c.cc.Invoke(ctx, "/mainchain.enterprise.v1.Query/EnterpriseUndPurchaseOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LockedUndByAddress(ctx context.Context, in *QueryLockedUndByAddressRequest, opts ...grpc.CallOption) (*QueryLockedUndByAddressResponse, error) {
	out := new(QueryLockedUndByAddressResponse)
	err := c.cc.Invoke(ctx, "/mainchain.enterprise.v1.Query/LockedUndByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalLocked(ctx context.Context, in *QueryTotalLockedRequest, opts ...grpc.CallOption) (*QueryTotalLockedResponse, error) {
	out := new(QueryTotalLockedResponse)
	err := c.cc.Invoke(ctx, "/mainchain.enterprise.v1.Query/TotalLocked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalUnlocked(ctx context.Context, in *QueryTotalUnlockedRequest, opts ...grpc.CallOption) (*QueryTotalUnlockedResponse, error) {
	out := new(QueryTotalUnlockedResponse)
	err := c.cc.Invoke(ctx, "/mainchain.enterprise.v1.Query/TotalUnlocked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalSupply(ctx context.Context, in *QueryTotalSupplyRequest, opts ...grpc.CallOption) (*QueryTotalSupplyResponse, error) {
	out := new(QueryTotalSupplyResponse)
	err := c.cc.Invoke(ctx, "/mainchain.enterprise.v1.Query/TotalSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalSupplyOverride(ctx context.Context, in *QueryTotalSupplyRequest, opts ...grpc.CallOption) (*QueryTotalSupplyResponse, error) {
	out := new(QueryTotalSupplyResponse)
	err := c.cc.Invoke(ctx, "/mainchain.enterprise.v1.Query/TotalSupplyOverride", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SupplyOfOverride(ctx context.Context, in *QuerySupplyOfOverrideOfRequest, opts ...grpc.CallOption) (*QueryTotalSupplyResponse, error) {
	out := new(QueryTotalSupplyResponse)
	err := c.cc.Invoke(ctx, "/mainchain.enterprise.v1.Query/SupplyOfOverride", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Whitelist(ctx context.Context, in *QueryWhitelistRequest, opts ...grpc.CallOption) (*QueryWhitelistResponse, error) {
	out := new(QueryWhitelistResponse)
	err := c.cc.Invoke(ctx, "/mainchain.enterprise.v1.Query/Whitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Whitelisted(ctx context.Context, in *QueryWhitelistedRequest, opts ...grpc.CallOption) (*QueryWhitelistedResponse, error) {
	out := new(QueryWhitelistedResponse)
	err := c.cc.Invoke(ctx, "/mainchain.enterprise.v1.Query/Whitelisted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Purchase Order queries proposal details based on PurchaseOrderId.
	EnterpriseUndPurchaseOrder(context.Context, *QueryEnterpriseUndPurchaseOrderRequest) (*QueryEnterpriseUndPurchaseOrderResponse, error)
	// Purchase Order queries proposal details based on PurchaseOrderId.
	EnterpriseUndPurchaseOrders(context.Context, *QueryEnterpriseUndPurchaseOrdersRequest) (*QueryEnterpriseUndPurchaseOrdersResponse, error)
	// Queries an account address for their locked FUND
	LockedUndByAddress(context.Context, *QueryLockedUndByAddressRequest) (*QueryLockedUndByAddressResponse, error)
	// Get total locked FUND
	TotalLocked(context.Context, *QueryTotalLockedRequest) (*QueryTotalLockedResponse, error)
	// Get total Unlocked FUND
	TotalUnlocked(context.Context, *QueryTotalUnlockedRequest) (*QueryTotalUnlockedResponse, error)
	// Get total supply, including Ent. locked FUND (overrides bank's total supply query)
	TotalSupply(context.Context, *QueryTotalSupplyRequest) (*QueryTotalSupplyResponse, error)
	TotalSupplyOverride(context.Context, *QueryTotalSupplyRequest) (*QueryTotalSupplyResponse, error)
	// SupplyOf queries the supply of a single coin.
	SupplyOfOverride(context.Context, *QuerySupplyOfOverrideOfRequest) (*QueryTotalSupplyResponse, error)
	// Query whitelisted addresses
	Whitelist(context.Context, *QueryWhitelistRequest) (*QueryWhitelistResponse, error)
	Whitelisted(context.Context, *QueryWhitelistedRequest) (*QueryWhitelistedResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) EnterpriseUndPurchaseOrder(ctx context.Context, req *QueryEnterpriseUndPurchaseOrderRequest) (*QueryEnterpriseUndPurchaseOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterpriseUndPurchaseOrder not implemented")
}
func (*UnimplementedQueryServer) EnterpriseUndPurchaseOrders(ctx context.Context, req *QueryEnterpriseUndPurchaseOrdersRequest) (*QueryEnterpriseUndPurchaseOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterpriseUndPurchaseOrders not implemented")
}
func (*UnimplementedQueryServer) LockedUndByAddress(ctx context.Context, req *QueryLockedUndByAddressRequest) (*QueryLockedUndByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockedUndByAddress not implemented")
}
func (*UnimplementedQueryServer) TotalLocked(ctx context.Context, req *QueryTotalLockedRequest) (*QueryTotalLockedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalLocked not implemented")
}
func (*UnimplementedQueryServer) TotalUnlocked(ctx context.Context, req *QueryTotalUnlockedRequest) (*QueryTotalUnlockedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalUnlocked not implemented")
}
func (*UnimplementedQueryServer) TotalSupply(ctx context.Context, req *QueryTotalSupplyRequest) (*QueryTotalSupplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalSupply not implemented")
}
func (*UnimplementedQueryServer) TotalSupplyOverride(ctx context.Context, req *QueryTotalSupplyRequest) (*QueryTotalSupplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalSupplyOverride not implemented")
}
func (*UnimplementedQueryServer) SupplyOfOverride(ctx context.Context, req *QuerySupplyOfOverrideOfRequest) (*QueryTotalSupplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupplyOfOverride not implemented")
}
func (*UnimplementedQueryServer) Whitelist(ctx context.Context, req *QueryWhitelistRequest) (*QueryWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Whitelist not implemented")
}
func (*UnimplementedQueryServer) Whitelisted(ctx context.Context, req *QueryWhitelistedRequest) (*QueryWhitelistedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Whitelisted not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.enterprise.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EnterpriseUndPurchaseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEnterpriseUndPurchaseOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EnterpriseUndPurchaseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.enterprise.v1.Query/EnterpriseUndPurchaseOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EnterpriseUndPurchaseOrder(ctx, req.(*QueryEnterpriseUndPurchaseOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EnterpriseUndPurchaseOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEnterpriseUndPurchaseOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EnterpriseUndPurchaseOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.enterprise.v1.Query/EnterpriseUndPurchaseOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EnterpriseUndPurchaseOrders(ctx, req.(*QueryEnterpriseUndPurchaseOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LockedUndByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLockedUndByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LockedUndByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.enterprise.v1.Query/LockedUndByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LockedUndByAddress(ctx, req.(*QueryLockedUndByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalLocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalLockedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalLocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.enterprise.v1.Query/TotalLocked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalLocked(ctx, req.(*QueryTotalLockedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalUnlocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalUnlockedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalUnlocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.enterprise.v1.Query/TotalUnlocked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalUnlocked(ctx, req.(*QueryTotalUnlockedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalSupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.enterprise.v1.Query/TotalSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalSupply(ctx, req.(*QueryTotalSupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalSupplyOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalSupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalSupplyOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.enterprise.v1.Query/TotalSupplyOverride",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalSupplyOverride(ctx, req.(*QueryTotalSupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SupplyOfOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySupplyOfOverrideOfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SupplyOfOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.enterprise.v1.Query/SupplyOfOverride",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SupplyOfOverride(ctx, req.(*QuerySupplyOfOverrideOfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Whitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Whitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.enterprise.v1.Query/Whitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Whitelist(ctx, req.(*QueryWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Whitelisted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWhitelistedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Whitelisted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.enterprise.v1.Query/Whitelisted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Whitelisted(ctx, req.(*QueryWhitelistedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mainchain.enterprise.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "EnterpriseUndPurchaseOrder",
			Handler:    _Query_EnterpriseUndPurchaseOrder_Handler,
		},
		{
			MethodName: "EnterpriseUndPurchaseOrders",
			Handler:    _Query_EnterpriseUndPurchaseOrders_Handler,
		},
		{
			MethodName: "LockedUndByAddress",
			Handler:    _Query_LockedUndByAddress_Handler,
		},
		{
			MethodName: "TotalLocked",
			Handler:    _Query_TotalLocked_Handler,
		},
		{
			MethodName: "TotalUnlocked",
			Handler:    _Query_TotalUnlocked_Handler,
		},
		{
			MethodName: "TotalSupply",
			Handler:    _Query_TotalSupply_Handler,
		},
		{
			MethodName: "TotalSupplyOverride",
			Handler:    _Query_TotalSupplyOverride_Handler,
		},
		{
			MethodName: "SupplyOfOverride",
			Handler:    _Query_SupplyOfOverride_Handler,
		},
		{
			MethodName: "Whitelist",
			Handler:    _Query_Whitelist_Handler,
		},
		{
			MethodName: "Whitelisted",
			Handler:    _Query_Whitelisted_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mainchain/enterprise/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryEnterpriseUndPurchaseOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEnterpriseUndPurchaseOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEnterpriseUndPurchaseOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PurchaseOrderId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PurchaseOrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryEnterpriseUndPurchaseOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEnterpriseUndPurchaseOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEnterpriseUndPurchaseOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PurchaseOrder.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryEnterpriseUndPurchaseOrdersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEnterpriseUndPurchaseOrdersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEnterpriseUndPurchaseOrdersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Purchaser) > 0 {
		i -= len(m.Purchaser)
		copy(dAtA[i:], m.Purchaser)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Purchaser)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEnterpriseUndPurchaseOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEnterpriseUndPurchaseOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEnterpriseUndPurchaseOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PurchaseOrders) > 0 {
		for iNdEx := len(m.PurchaseOrders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PurchaseOrders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockedUndByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockedUndByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockedUndByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockedUndByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockedUndByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockedUndByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LockedUnd != nil {
		{
			size, err := m.LockedUnd.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalLockedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalLockedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalLockedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTotalLockedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalLockedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalLockedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTotalUnlockedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalUnlockedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalUnlockedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTotalUnlockedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalUnlockedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalUnlockedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTotalSupplyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalSupplyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalSupplyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTotalSupplyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalSupplyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalSupplyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Supply.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QuerySupplyOfOverrideOfRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySupplyOfOverrideOfRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySupplyOfOverrideOfRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWhitelistRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWhitelistRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWhitelistRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryWhitelistResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWhitelistResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWhitelistResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryWhitelistedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWhitelistedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWhitelistedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWhitelistedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWhitelistedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWhitelistedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Whitelisted {
		i--
		if m.Whitelisted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryEnterpriseUndPurchaseOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PurchaseOrderId != 0 {
		n += 1 + sovQuery(uint64(m.PurchaseOrderId))
	}
	return n
}

func (m *QueryEnterpriseUndPurchaseOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PurchaseOrder.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryEnterpriseUndPurchaseOrdersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Purchaser)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	return n
}

func (m *QueryEnterpriseUndPurchaseOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PurchaseOrders) > 0 {
		for _, e := range m.PurchaseOrders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLockedUndByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLockedUndByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.LockedUnd != nil {
		l = m.LockedUnd.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTotalLockedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTotalLockedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTotalUnlockedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTotalUnlockedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTotalSupplyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTotalSupplyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Supply.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QuerySupplyOfOverrideOfRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWhitelistRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryWhitelistResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryWhitelistedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWhitelistedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Whitelisted {
		n += 2
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEnterpriseUndPurchaseOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEnterpriseUndPurchaseOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEnterpriseUndPurchaseOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PurchaseOrderId", wireType)
			}
			m.PurchaseOrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PurchaseOrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEnterpriseUndPurchaseOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEnterpriseUndPurchaseOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEnterpriseUndPurchaseOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PurchaseOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PurchaseOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEnterpriseUndPurchaseOrdersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEnterpriseUndPurchaseOrdersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEnterpriseUndPurchaseOrdersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purchaser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Purchaser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= PurchaseOrderStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEnterpriseUndPurchaseOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEnterpriseUndPurchaseOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEnterpriseUndPurchaseOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PurchaseOrders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PurchaseOrders = append(m.PurchaseOrders, EnterpriseUndPurchaseOrder{})
			if err := m.PurchaseOrders[len(m.PurchaseOrders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockedUndByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockedUndByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockedUndByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockedUndByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockedUndByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockedUndByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedUnd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LockedUnd == nil {
				m.LockedUnd = &LockedUnd{}
			}
			if err := m.LockedUnd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalLockedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalLockedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalLockedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalLockedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalLockedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalLockedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalUnlockedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalUnlockedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalUnlockedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalUnlockedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalUnlockedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalUnlockedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalSupplyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalSupplyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalSupplyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalSupplyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalSupplyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalSupplyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Supply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySupplyOfOverrideOfRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySupplyOfOverrideOfRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySupplyOfOverrideOfRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWhitelistRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWhitelistRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWhitelistRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWhitelistResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWhitelistResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWhitelistResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWhitelistedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWhitelistedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWhitelistedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWhitelistedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWhitelistedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWhitelistedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Whitelisted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Whitelisted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
